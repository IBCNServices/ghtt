#!/usr/bin/env python3

#
# PREREQUISITES
# * since we're using ssh to clone and push, these must be configured correctly for your user.
#
import sys
import subprocess
import argparse

import github3


def create_repos(token, organization, assignment_path, students):
    print(green("# Creating student repositories.."))
    print(green("# Org: '{}'".format(organization)))
    print(green("# Path: '{}'".format(assignment_path)))
    print(green("# Students: '{}'".format(students)))

    # Github Enterprise with custom hostname
    g = github3.github.GitHubEnterprise(
        "https://github.ugent.be",
        token=token)

    org = g.organization(organization)

    for student in students:
        print(green("\n\nPreparing repo for {}".format(student)))

        reponame = get_reponame(student)
        try:
            repo = org.create_repository(reponame, private=True)
        except Exception:
            repo = g.repository(organization, reponame)

        print(green("Pushing source to {}".format(repo.ssh_url)))
        subprocess.check_call(
            ["git", "push", repo.ssh_url], cwd=assignment_path
        )

        print(green("Protecting the master branch so students can't rewrite history"))
        master = repo.branch("master")
        master.protected = True


def grant(token, organization, students):
    print(green("# Granting students write permission to their repository.."))
    print(green("# Org: '{}'".format(organization)))
    print(green("# Students: '{}'".format(students)))

    # Github Enterprise with custom hostname
    g = github3.github.GitHubEnterprise(
        "https://github.ugent.be",
        token=token)

    for student in students:
        reponame = get_reponame(student)
        repo = g.repository(organization, reponame)

        print(green("Adding the student as collaborator"))
        repo.add_collaborator(student)


def remove_grant(token, organization, students):
    print(green("# Removing students write permission to their repository.."))
    print(green("# Org: '{}'".format(organization)))
    print(green("# Students: '{}'".format(students)))

    # Github Enterprise with custom hostname
    g = github3.github.GitHubEnterprise(
        "https://github.ugent.be",
        token=token)

    for student in students:
        reponame = get_reponame(student)
        repo = g.repository(organization, reponame)

        # Delete open invitations for that user
        # Do this before removing as collaborator so we don't get a race condition where
        # student accepts invitation between the remove as collaborator and the remove
        # of the invitation.
        for invitation in repo.invitations():
            if str(invitation.invitee) == student:
                print(green("Removing invitation for student '{}' for repo '{}'".format(
                    student, reponame)))
                invitation.delete()

        print(green("Removing the student '{}' as collaborator from '{}'".format(
            student, reponame)))
        repo.remove_collaborator(student)



def green(text):
    return "\033[1;32m{}\033[1;m".format(text)


def get_reponame(student):
    return "examen-{}".format(student.lower())


def main():
    parser = argparse.ArgumentParser(description='Prepare exam repositories.')
    parser.add_argument(
        'command',
        help='The command to execute.'
             '"create" creates the repositories and '
             '"grant" grants the students rights to the already created repositories.',
        choices=['create', 'grant', 'remove-grant'])
    parser.add_argument(
        '-o', '--organization',
        help='Existing Github organization to create the exam repositories in.',
        required='True')
    parser.add_argument(
        '-t', '--token',
        help='Github authentication token.',
        required='True')
    results, _ = parser.parse_known_args(sys.argv[1:])
    students = [
        "sborny", "bvolckae", "mesebrec"
    ]

    if results.command == "create":
        parser.add_argument(
            '-s', '--source',
            help='Assignment directory. This will be pushed to the exam repositories.',
            required='True')
        results = parser.parse_args(sys.argv[1:])

        create_repos(results.token, results.organization, results.source, students)
    elif results.command == "grant":
        grant(results.token, results.organization, students)
    elif results.command == "remove-grant":
        remove_grant(results.token, results.organization, students)
    else:
        print("COMMAND NOT RECOGNIZED")
        exit(1)


if __name__ == "__main__":
    main()
